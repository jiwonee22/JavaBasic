 + to_char(datetime)

  - DATETIME -> VARCHAR2
  - 날짜시간 -> 문자

  - to_char(datetime)
  - to_char(datetime, 날짜서식문자)


 + 날짜형식 지정하는 문자

  - SCC : 세기

  - YEAR, year, Year : 년도

  - YYYY, YY, YYY, Y : 숫자 년도, Y의 개수는 년도를 표현하는 자릿수를 나타냄

  - MM : 숫자 월
  - MONTH, MON : 문자 월

  - Q : 분기

  - DD : 월 기준 날짜
  - D : 주 기준 날짜(일요일부터 1, 토요일까지 7)
  - DDD : 년 기준 날짜

  - DAY : 요일
  - DY : 요일의 약자


  - HH : 12시간 표기법 시간
  - HH12 : 12시간 표기법 시간
  - HH24 : 24시간 표기법 시간

  - MI : 분

  - SS : 초

  - AM, PM, A.M., P.M. : 오전/오후

  - FF : 밀리초
	** SYSTIMESTAMP같은 밀리초를 가진 TIMESTAMP타입에서 사용 가능하다



 + 접미어 서식
  - TH : 서수 (숫자+영문)	(ex. 31st)

  - SP : 기수 (영문)		(ex. THIRTY-ONE)

  - THSP, SPTH : 서수 (영문)	(ex. THIRTY-FIRST)


  ** 접미어 앞에 오는 서식의 UPEER, LOWER, INITCAP이 적용된다
	ex)	Ddsp -> Four
		DDth -> 04TH
		mmsp -> nine

 + 기타 단일행 함수

  - NVL
	특정값이 NULL이 판단하여 원하는 값으로 변환하는 함수

	NVL(비교데이터, 원하는 값)


  - NVL2
	특정값이 NULL이 판단하여 원하는 값으로 변환하는 함수
	NULL일 경우, NULL이 아닐 경우에 맞춰 원하는 값으로 변환할 수 있다

	NVL2(비교데이터, NULL이 아닐 경우 반환값, NULL일 경우 반환값)


  - NULLIF
	두 개의 같은 같은지 비교하고 같으면 NULL 반환
	다르면 첫번째 매개변수를 반환

	NULLIF(첫번째값, 두번째값)


  - DECODE
	비교값을 여러 개 나열하고 비교 결과를 반환하는 함수

		 + DECODE 함수
  - 자바의 if문, switch문과 비슷한 기능을 한다

  - 비교값과 기준값을 비교하여 반환할 값을 선택하는 함수


 + 형식

	DECODE( 기준값,
		비교값1, 반환값1,
		비교값2, 반환값2,
		...
		default값 )

	-> 기준값과 같은 비교값을 찾으면 바로 다음에 오는 반환값을 반환한다
	-> 기준값과 같은 비교값이 없으면 default값을 반환한다

	-> default값은 생략가능하다
		
 + CASE 구문
  - DECODE함수와 비슷한 동작을 하는 조건 구문

  - CASE ~ WHEN THEN ~ END 로 구성된다

  - WHEN THEN의 마지막에 ELSE 구문을 추가할 수 있다


 + 형식

	CASE 기준값
	  WHEN 비교값1 THEN 반환값1
	  WHEN 비교값2 THEN 반환값2
	  WHEN 비교값3 THEN 반환값3
	  ...
	  ELSE default반환값
	END

	-----------------------------

	CASE
	  WHEN 조건식1 THEN 반환값1
	  WHEN 조건식2 THEN 반환값2
	  WHEN 조건식3 THEN 반환값3
	  ...
	  ELSE default반환값
	END
		
		
 + 그룹 함수, Group Function

  - 테이블의 특정 행들을 그룹화하여 하나의 결과로 반환한다

  - 주로 테이블의 통계 처리를 수행한다

  - 계산된 결과를 하나의 값으로 반환하게 된다
  - 그룹마다 하나씩 여러 개의 값으로 반환하기도 한다


  - COUNT : 데이터를 가지고있는 행 수를 반환, 데이터의 개수
	NULL값을 무시한다
	NULL데이터를 가진 컬럼을 조회하면 전체 행 수에 포함되지 않는다

	** count(*) vs count(1) 성능 이슈가 있지만 아무거나 써도된다

  - SUM : 행들의 합계
  - AVG : 행들의 평균

  - MAX : 행들 중에서 가장 큰 값
  - MIN : 행들 중에서 가장 작은 값
  
   + GROUP BY 절
  - 데이터(행)들을 원하는 기준(컬럼의 조합)으로 그룹화할 때 사용하는 절

  - 그룹함수 사용할 때 적용한다

  - GROUP BY 절에 컬럼을 명시하고 해당 컬럼의 값이 같은 행들을
   같은 그룹으로 만들어준다

	-> SELECT절에서 그룹함수 이외에 다른 컬럼을 같이 조회하려면
	 GROUP BY절에 그룹함수를 제외한 모든 컬럼을 다 적어주어야한다


 + 구문 형식

	GROUP BY colname1, colname2, colname3, ...
  
  
  + HAVING 절
  - GROUP By 절 다음에 오는 조건절

  - 그룹함수를 이용한 조건을 설정하고 싶을 때 사용한다

	-> WHERE절에서는 그룹함수를 사용할 수 없다
	
	 + SELECT 구문의 실행(수행) 순서
	1. FROM절	- 조회하려는 대상 테이블을 설정한다

	2. WHERE절	- 조회될 행을 선택하는 조건문 적용

	3. GROUP BY절	- 그룹화 기준이 되는 컬럼 적용

	4. HAVING절	- 그룹함수를 이용한 조건문 적용

	5. SELECT절	- 조회할 컬럼을 지정한다 (DISTINCT 중복 제거 가능)

	6. ORDER BY절	- 정렬

  ** 작성하는 순서
	SELECT
	FROM
	WHERE
	GROUP BY
	HAVING
	ORDER BY

  ** 수행 순서에 따라 Alias(별칭)도 적용된다
	-> SELECT절에서 지정한 Alias를 ORDER BY에서 사용할 수 있다
	-> SELECT절에서 지정한 Alias를 WHERE절에서 사용할 수 없다

-------------------------------------------------------------------------------------------------------------------
-- to_char(date)
SELECT
--    sysdate,
--    to_char( sysdate )

--    to_char( sysdate, 'SCC' ) --세기
--    , to_char( to_date('328/04/03'), 'SCC' )

--    to_char( sysdate, 'YEAR' ), --영문 년도(대문자)
--    to_char( sysdate, 'year' ), --영문 년도(소문자)
--    to_char( sysdate, 'Year' ) --영문 년도(첫글자 대문자)
    
--    to_char( sysdate, 'YYYY' ), --숫자 년도
--    to_char( sysdate, 'YY' ),
--    to_char( sysdate, 'Y' ),
--    to_char( sysdate, 'YYY' ),
--    to_char( sysdate, 'YYYYYY' ) -- 'YYYY YY'

--    to_char( sysdate, 'MM' ), --숫자 월
--    to_char( sysdate, 'MONTH' ), --문자 월
--    to_char( sysdate, 'MON' )

--    to_char( sysdate, 'Q' ), --분기
--    to_char( to_date('2021/01/01'), 'Q' ) "1",
--    to_char( to_date('2021/04/01'), 'Q' ) "2",
--    to_char( to_date('2021/07/01'), 'Q' ) "3",
--    to_char( to_date('2021/10/01'), 'Q' ) "4"

--    to_char( sysdate, 'DD' ), --월 단위 날짜
--    to_char( sysdate, 'D' ), --주 단위 날짜(일요일: 1)
--    to_char( sysdate, 'DDD' ) --년 단위 날짜

--    to_char( sysdate, 'DAY' ), --요일
--    to_char( sysdate, 'DY' )
    
--    to_char( sysdate, 'HH' ), --12시간 표기 시간
--    to_char( sysdate, 'HH12' ), --12시간 표기 시간
--    to_char( sysdate, 'HH24' ) --24시간 표기 시간

--    to_char( sysdate, 'MI' ), --분

--    to_char( sysdate, 'SS' ) --초

    to_char( sysdate, 'am' ), --오전/오후
    to_char( sysdate, 'pm' ),
    to_char( sysdate, 'a.m.' ),
    to_char( sysdate, 'p.m.' )
FROM dual;



--초, 밀리초
SELECT
--    to_char(sysdate, 'FF') "밀리초" --DATE타입인 sysdate는 밀리초가 없다

    systimestamp, --TIMESTAMP타입인 systimestamp에는 밀리초가 있다
    to_char(systimestamp, 'FF'), --밀리초
    to_char(systimestamp, 'FF1'), --밀리초 한자리 0.1초단위
    to_char(systimestamp, 'FF2'), --밀리초 두자리 0.01초단위
    to_char(systimestamp, 'FF3') --밀리초 세자리 0.001초단위
FROM dual;



--접미어 서식
SELECT
    to_char(sysdate+1, 'DD') "일",
    to_char(sysdate+1, 'ddth') "축약된 서수",
    to_char(sysdate+1, 'Ddsp') "기수",
    to_char(sysdate+1, 'DDspth') "서수",
    to_char(sysdate+1, 'DDthsp') "서수"
FROM dual;





-- to_number(varchar2) : 문자 -> 숫자
--  숫자형식(Number Format)을 가진 문자를 숫자로 변환한다

SELECT
    123.678 "1" -- 숫자 ( NUMBER )
    , '123.678' "2" -- 문자 ( VARCHAR2 )
    , to_number( '123.678' ) "3"
    , to_number( '123.678', '99999.999' ) "4" -- 서식문자 9 : 허용 가능한 범위를 나타내는 서식 
--    , to_number( '123.678', '99999.9' ) "5" -- 에러, 소수점이하 자리가 1개만 허용된다
--    , to_number( '12345.678', '999.99999' ) "5" -- 에러, 정수부분 자리가 3개만 허용된다
FROM dual;

SELECT
--    to_number( '67,800' ) --에러, ',' 를 숫자형식으로 받아들이지 않는다
    to_number( '67,800', '999,999' )
FROM dual;

SELECT
    to_number( '$1,676.54', '$999,999,999.99' ) "1"
FROM dual;





-- to_date(varchar2) : 문자 -> 날짜
--  날짜형식(Datetime Format)의 문자를 날짜로 변환한다

SELECT
--    '19/11/03' + 1  -- 에러, DATE포맷이지만 자동 변환은 안된다
    to_date('19/11/03') + 3
FROM dual;

SELECT
    '12 1 11' "1",
    to_date('12 1 11') "2",
    to_date('12 1 11', 'mm dd yy') "3",
    to_date('12-1-11', 'yy mm dd') "4"
FROM dual;





--기타 함수

--NVL(a, b)함수
--  a가 null일 경우 b로 치환한다
SELECT empno, ename, NVL(comm, 0) comm
FROM emp;

--NVL2(a, b, c) 함수
--  a값이 null이 아닐 경우 b로 치환, null일 경우 c로 치환
SELECT empno, ename, sal, comm, NVL2(comm, sal + comm, sal) total
FROM emp;


--NULLIF(a, b) 함수
--  a값과 b값을 비교하여 같으면 NULL을 반환, 다르면 a를 반환한다
SELECT empno, ename, job
    , NULLIF( job, 'SALESMAN' ) NIF
    , NVL( NULLIF( job, 'SALESMAN' ), '영업' ) jobName
FROM emp;





-- DECODE 함수
SELECT * FROM dept;

SELECT empno, ename, deptno
    , DECODE(
        deptno
        , 10,
        '회계팀'
        , 20, '연구팀'
        , 30, '영업팀'
        , 40, '운영팀'
        , '부서없음' ) AS dname
FROM emp
ORDER BY empno;


-- CASE 구문
SELECT empno, ename, deptno
    , CASE deptno
        WHEN 10 THEN '회계팀'
        WHEN 20 THEN '연구팀'
        WHEN 30 THEN '영업팀'
        WHEN 40 THEN '운영팀'
        ELSE '부서없음'
    END AS dname
FROM emp;


SELECT empno, ename, deptno
    , CASE
        WHEN job='PRESIDENT' THEN '사장'
        WHEN deptno=10 THEN '회계팀'
        WHEN deptno=20 THEN '연구팀'
        WHEN deptno=30 THEN '영업팀'
        WHEN deptno=40 THEN '운영팀'
        ELSE '부서없음'
    END AS dname
FROM emp;



--QUIZ
-- emp테이블 이용

-- 10부서인 사원들은 급여(sal)를 15% 인상하여 조회
-- 20부서인 사원들은 급여(sal)를 8% 인상하여 조회

SELECT empno, ename, sal, deptno
    , CASE deptno
        WHEN 10 THEN sal*1.15
        WHEN 20 THEN sal*1.08
        ELSE sal
    END increase
FROM emp;


SELECT empno, ename, sal, deptno
    , DECODE( deptno 
        , 10, sal * 1.15
        , 20, sal * 1.08
        , sal
    ) increase
FROM emp;





-- 그룹함수

-- COUNT
SELECT * FROM emp;
SELECT count(*) FROM emp; -- 12

SELECT empno FROM emp;
SELECT count(empno) FROM emp; --12

SELECT mgr FROM emp;
SELECT count(mgr) FROM emp; --11 (1개는 NULL값)

SELECT comm FROM emp;
SELECT count(comm) FROM emp; --4


SELECT * FROM emp;
SELECT 1 FROM emp;

SELECT count(*) FROM emp;
SELECT count(1) FROM emp;



-- SUM : 합계
SELECT sal FROM emp;
SELECT sum(sal) FROM emp;

-- AVG : 평균
SELECT avg(sal) FROM emp;

-- MAX : 최대값
SELECT max(sal) FROM emp;

-- MIN : 최소값
SELECT min(sal) FROM emp;




-- 그룹화

-- 부서별로 급여의 합계를 구한다 
SELECT
    deptno
    , sum(sal) --그룹별 합계 계산
FROM emp
GROUP BY deptno -- 같은 데이터값(부서번호)로 그룹이 만들어진다
ORDER BY deptno;


--부서별 인원수 구하기
SELECT
    deptno
    , count(*) CNT
FROM emp
GROUP BY deptno
ORDER BY deptno;




SELECT deptno, job FROM emp
ORDER BY deptno, job;

SELECT deptno, job
    , count(*)
FROM emp
GROUP BY deptno, job
ORDER BY deptno, job;



SELECT empno, ename
FROM emp
ORDER BY empno;


--잘못 사용한 경우
--  문법은 맞지만 결과가 의미가 없다
--  empno, ename 조합의 데이터는 중복값이 없으므로 그룹화할 필요가 없다
SELECT empno, ename
    , count(*) CNT
FROM emp
GROUP BY empno, ename
ORDER BY empno;



-- 그룹함수를 조건으로 사용하기
SELECT
    deptno
    , count(*) CNT
FROM emp
--WHERE count(*) < 5 -- 에러, WHERE절에서 그룹함수를 사용할 수 없다
GROUP BY deptno
HAVING count(*) < 5 --그룹화 이후에 사용할 수 있는 조건절
ORDER BY deptno;





-- QUIZ

-- 조회 컬럼
-- deptno, dname, cnt, tot_sal, avg_sal

--  dname -> 한글로
--  cnt, tot_sal, avg_sal -> 부서별 통계
--  avg_sal -> 소수점 2자리까지
SELECT
    deptno, --부서번호
    case deptno
        WHEN 10 THEN '회계팀'
        WHEN 20 THEN '연구팀'
        WHEN 30 THEN '영업팀'
        WHEN 40 THEN '운영팀'
    END dname, --부서이름
    count(*) cnt, --부서 인원 수
    sum(sal) tot_sal, --부서 급여 합계
    round( avg(sal), 2 ) avg_sal --부서 급여 평균
FROM emp
GROUP BY deptno
--    , case deptno --문법으로는 CASE구문도 GROUP BY에 포함해야하지만 지금 이 코드에서는 안 해도 결과가 잘 나온다
--        WHEN 10 THEN '회계팀'
--        WHEN 20 THEN '연구팀'
--        WHEN 30 THEN '영업팀'
--        WHEN 40 THEN '운영팀'
--    END
ORDER BY deptno;
 
		