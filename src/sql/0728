 + SELECT 구문에서의 Alias, 별칭
  - 조회하려는 컬럼명, 테이블명 등의 이름에 별칭을 붙일 수 있다

  - 컬럼에 AS 키워드를 붙이고 별명을 붙이거나, 그냥 별칭을 바로 옆에 사용한다
	ex)	empno AS "사원번호"
	ex)	empno "사번"

  - 테이블명 옆에 별칭을 붙여 사용한다
	ex)	FROM emp "사원정보"


  - ""큰따옴표로 묶어서 되고 ""큰따옴표없이 사용해도되지만 숫자나 기호가
   포함되면 ""로 묶어야한다


  - 한글, 영어, 숫자 전부 사용 가능하다

  - 컬럼명과 테이블명을 단순화하거나 명확하게할 때 사용한다

  
   + WHERE 절
  - 조건절

  - 조건에 만족하는 데이터만(행) 조회되거나 처리되도록 설정한다

  - SELECT, UPDATE, DELETE 구문에서 사용된다


  - 형식
	WHERE [조건절]

	WHERE 컬럼명 연산자 조건값

	ex)	WHERE sal < 2000

	ex)	WHERE ename = 'SMITH'


 + 연산자
  - 비교(관계) 연산자

	=	같다
	!=	같지 않다 ( <>  ^= )

	<	작다
	>	크다

	<=	작거나 같다
	>=	크거나 같다


  - 논리 연산자
	AND	두 조건이 모두 만족할 때 TRUE
	OR	두 조건 중 하나라도 만족할 때 TRUE
	NOT	논리 부정


  - 기타 연산자
	BETWEEN a AND b
		a 와 b 사이의 데이터라면 TRUE (a, b 포함)

		ex)	WHERE deptno BETWEEN 10 AND 20

		ex)	WHERE sal BETWEEN 1000 AND 2000
		ex)	WHERE sal >= 1000 AND sal <= 2000
		ex)	WHERE (sal >= 1000) AND (sal <= 2000)

		부정문	NOT BETWEEN a AND b


	IN ( list )
		list에 해당하는 값 중 하나라도 일치하면 TRUE

		ex)	deptno IN ( 10, 20 )
			(deptno = 10 OR deptno = 20)

		부정문	NOT IN ( list )


	LIKE
		지정된 형식의 문자열 포맷(서식)으로 일치하는 조건

		% : 여러 개의 문자, 또는 문자가 없는 경우
		_ : 단일 문자, 반드시 한 글자가 존재하는 경우

		ex)	ename LIKE 'B%' -> B로 시작하는 모든 문자
		ex)	ename LIKE '%B%' -> B를 포함하는 모든 문자
		ex)	ename LIKE '_B%' -> 두 번째 문자가 B인 모든 문자
		ex)	ename LIKE '%B' -> B로 끝나는 모든 문자

		ex)	SELECT * FROM board --게시판
			WHERE title LIKE '%검색어%'; --게시글 제목

		부정문	NOT LIKE


	IS NULL
		컬럼의 값이 NULL인지 검사하는 연산자

		ex)	WHERE mgr IS NULL

	** 테이블의 데이터 중에서 (null) 값은 데이터가 없음을 나타낸다

	** WHERE mgr = null 같은 형식의 조건식은
	 데이터가 존재하지 않는 공간(mgr)과 null값을 비교하는 구문이 된다
	** 데이터가 존재하지 않는 공간(행)은 아예 조회(검색) 대상에서 제외된다

		부정문	IS NOT NULL

		ex)	comm IS NOT NULL
  
   + DB 조회(탐색) 방법, Scan

  - 전체 탐색, Full Scan
	테이블의 처음부터 끝까지 전부 확인하며 탐색하는 방법

	-> 시간이 오래걸린다
	-> DB의 성능을 높이려면 풀 스캔되는 상황을 줄여야한다


  - 인덱스 탐색, Index Scan
	 인덱스를 우선 확인하고 인덱스에 연결된 데이터(행을) 찾아가서
	탐색하는 방법

	인덱스에서 찾을 수 없는 데이터라면 풀스캔한다

	**인덱스, Index
	 테이블의 대표컬럼을 지정하여 테이블과 별개로 작성한 객체
	 테이블의 데이터를 빠르게 찾을 수 있도록 도와준다
  
   + ORDER BY 절
  - SELECT쿼리 결과를 정렬하기 위한 구문

  - WHERE절 다음에 온다

  - 기본적으로 오름차순 정렬을 한다


  - ASC 기능 : 오름차순, ASCENDING의 약자, 생략가능
  - DESC 기능 : 내림차순, DESCENDING의 약자



 + ORDER BY 구문 형식

	ORDER BY 기준컬럼명1, 기준컬럼명2, ...

	-> 기준컬럼마다 ASC 또는 DESC를 적용할 수 있다



 + NULL을 포함하는 컬럼에 대한 정렬
  - 오름차순(ASC) 정렬일 경우 NULL이 마지막에 나온다
  - 내림차순(DESC) 정렬일 경우 NULL이 처음에 나온다

  - NULL 데이터의 정렬 순서를 변경하려면 NULLS 키워드를 사용한다

	NULLS FIRST : NULL데이터를 처음에 보이도록 정렬한다
	NULLS LAST : NULL데이터를 마지막에 보이도록 정렬한다

	ex)	ORDER BY comm DESC NULLS LAST
	ex)	ORDER BY comm ASC NULLS FIRST

	** DESC NULLS LAST가 주로 사용된다
  
   + DISTINCT 키워드
  - 중복 데이터를 제거하는 키워드

  - SELECT 키워드와 짝꿍으로 사용된다

	SELECT ~ FROM 구문

	SELECT DISTINCT ~ FROM 구문

  - 조회된 데이터(행의 모든 컬럼)가 중복되었을 때 중복을 제거하고
   한 개만 보여준다

  - 모든 컬럼의 값이 같아야 행을 하나로 줄여서 조회한다
  
   + 데이터 연결 연산자, ||

  - 두 개의 데이터를 하나의 데이터(문자열)로 연결하여 표현하는 연산자


  - 문자열 || 문자열

  - 문자열 || 숫자

  - 문자열 || 날짜
  
  -------------------------------------------------------------------------------------------------------------------------
  
  -- 컬럼명에 Alias(별칭)을 적용하여 조회하기
SELECT
    empno AS "eno", --사원번호
    ename AS 사원이름, --사원이름
    sal AS "급여", --급여
    deptno --부서정보
FROM emp 사원; --테이블 Alias에서는 AS 키워드를 넣지 않아야 한다










--WHERE절

SELECT * FROM emp;

-- 급여(sal)가 2000 미만인 사원
SELECT * FROM emp
WHERE sal < 2000;

--영업사원(job - SALESMAN)들만 조회하기
SELECT * FROM emp
WHERE job = 'SALESMAN';

--급여(sal)가 2500이 넘고 관리자(job - MANAGER)가 아닌 사원
SELECT * FROM emp
WHERE sal > 2500
--    AND job <> 'MANAGER';
    AND NOT( job = 'MANAGER' );





-- BETWEEN a AND b
-- 사원번호(empno)가 7700~7900인 사원들을 조회하기
SELECT empno, ename FROM emp
WHERE empno BETWEEN 7700 AND 7900; -- 7700포함, 7900포함
-- CLARK, KING, TURNER, JAMES

SELECT empno, ename FROM emp
WHERE empno >= 7700 AND empno <= 7900;


-- 사원번호가 7700~7900이 아닌 사원들 조회하기
SELECT empno, ename FROM emp
WHERE NOT( empno BETWEEN 7700 AND 7900 );

SELECT empno, ename FROM emp
WHERE empno NOT BETWEEN 7700 AND 7900;


-- 사원이름(ename)이 'ALLEN' ~ 'KING' 사이인 사원들 조회하기
SELECT empno, ename FROM emp
--WHERE ename BETWEEN 'ALLEN' AND 'KING'; --사전순서대로 문자를 비교한다 (ASCII값 기준)
WHERE ename >= 'ALLEN' AND ename <= 'KING';





-- IN (list)
SELECT empno, ename FROM emp
WHERE empno IN ( 7521, 7654, 7839, 7902 );

SELECT empno, ename FROM emp
WHERE empno NOT IN ( 7521, 7654, 7839, 7902 );

SELECT empno, ename FROM emp
WHERE ename IN ( 'SMITH', 'ALLEN', 'KING', 'JAMES', 'JAVA' );

SELECT empno, ename FROM emp
WHERE ename = 'SMITH'
    OR ename = 'ALLEN'
    OR ename = 'KING'
    OR ename = 'JAMES'
    OR ename = 'JAVA';





-- LIKE
SELECT empno, ename FROM emp
--WHERE ename LIKE '%R%'; -- 이름에 R을 포함하는 모든 사원
--WHERE ename LIKE '_A%'; -- 이름의 두번째 알파벳이 A인 모든 사원
--WHERE ename LIKE '%RD'; -- 이름이 RD로 끝나는 모든 사원
WHERE ename NOT LIKE '%R%'; -- 이름에 R을 포함하지 않는 모든 사원


-- LIKE연산자와 IN연산자를 같이 사용하는 문법은 없다
SELECT empno, ename FROM emp
--WHERE ename LIKE ( IN ( '%R%', '%L%' ) ); --문법 에러, 안됨
WHERE ename LIKE '%R%'
    OR ename LIKE '%L%';


-- 같은 값인지 비교
SELECT * FROM emp
WHERE ename = 'SMITH'; -- INDEX-SCAN -> FULL-SCAN

-- 절대 사용하면 안된다! - 같은 값인지 비교할 때 LIKE연산자 사용하면 안됨
--  LIKE연산자는 FULL-SCAN(전체 탐색)으로 작동한다 -> 느려짐
SELECT * FROM emp
WHERE ename LIKE 'SMITH';





-- IS NULL
SELECT * FROM emp
--WHERE comm = null; -- 조회되지 않음
--WHERE mgr = null; -- 조회되지 않음
--WHERE mgr IS NULL; --조회됨
WHERE mgr IS NOT NULL; --조회됨





--WHERE 문제
-- SELECT empno, ename, deptno FROM emp
-- WHERE	 
-- 구조를 이용하여 해결할 것

 -- 부서번호가 30이고 직무가 영업인 사원 조회
--	ALLEN, WARD, MARTIN, TURNER
SELECT empno, ename, deptno FROM emp
WHERE deptno = 30
    AND job = 'SALESMAN';

 -- 부서번호가 30이고 직무가 영업이 아닌 사원 조회
--	BLAKE, JAMES
SELECT empno, ename, deptno FROM emp
WHERE deptno = 30
    AND job ^= 'SALESMAN';


 -- 부서번호가 30이 아니고 직무가 영업이 아닌 사원 조회
--	SMITH, JONES, CLARK, KING, FORD, MILLER
SELECT empno, ename, deptno FROM emp
WHERE deptno != 30
    AND job != 'SALESMAN';


 -- 사원번호가 7782에서 7900 사이인 사원 조회
--	CLARK, KING, TURNER, JAMES
SELECT empno, ename, deptno FROM emp
--WHERE empno BETWEEN 7782 AND 7900;
WHERE empno >= 7782 AND empno <= 7900;

 -- 사원명이 'A'부터 'C'로 시작하는 사원 조회
--	ALLEN, BLAKE, CLARK
SELECT empno, ename, deptno FROM emp
--WHERE ename BETWEEN 'A' AND 'C'; --잘못됨, C로 시작하는 이름들이 조회되지 않음
--WHERE ename BETWEEN 'A%' AND 'C%'; --잘못됨, %서식문자는 LIKE에서만 사용한다!
--WHERE ename BETWEEN 'A' AND 'D'; --잘못됨, 'D'를 포함하여 조회된다
--WHERE ename BETWEEN 'A' AND 'C~'; --조회는 된다
WHERE ename >='A' AND ename < 'D'; --적당한 조건식


 -- 부서번호가 10 또는 30인 사원 조회 (IN 사용)
--	ALLEN, WARD, MARTIN, BLAKE, CLARK, KING, TURNER, JAMES, MILLER
SELECT empno, ename, deptno FROM emp
WHERE deptno IN ( 10, 30 );





-- ORDER BY 절
SELECT * FROM emp
--ORDER BY empno; -- empno컬럼을 기준으로 오름차순 정렬 (기본 오름차순)
--ORDER BY empno DESC; -- empno컬럼을 기준으로 내림차순 정렬 (DESC)
--ORDER BY empno ASC; -- empno컬럼을 기준으로 오름차순 정렬 (ASC)
--ORDER BY ename DESC; -- ename컬럼을 기준으로 내림차순 정렬
ORDER BY hiredate; --hiredate컬럼을 기준으로 오름차순 정렬


-- deptno 기준으로 정렬은 한 뒤에
--deptno를 같은 값으로 가진 그룹 내에서 ename을 기준으로 정렬한다
SELECT empno, ename, deptno FROM emp
ORDER BY deptno DESC, ename DESC;


-- null을 가진 컬럼 정렬하기 + null값 제외
SELECT empno, ename, deptno, comm FROM emp
WHERE comm IS NOT NULL
ORDER BY comm DESC;


-- null을 가진 컬럼 정렬하기 + null값을 마지막으로
SELECT empno, ename, deptno, comm FROM emp
ORDER BY comm DESC NULLS LAST;
--ORDER BY comm ASC NULLS FIRST;


-- 조회 대상 컬럼으로 지정되지 않아도 정렬 기준 컬럼으로 사용 가능
SELECT empno, ename, comm
FROM emp
ORDER BY sal;





--DISTINCT
SELECT DISTINCT * FROM emp; --중복제거 없음, 잘못 사용한 방식

--30 SALESMAN 데이터가 4행 조회됨
SELECT deptno, job FROM emp
ORDER BY deptno, job;

--30 SALESMAN 데이터가 중복제거되어 1행으로 조회됨
SELECT DISTINCT deptno, job FROM emp
ORDER BY deptno, job;


--DISTCINT의 잘못된 사용법 - DISTINCT는 컬럼에 적용하는 키워드가 아니다
SELECT
    DISTINCT deptno,
    DISTINCT job
FROM emp;

--DISTCINT의 잘못된 사용법 - DISTINCT는 컬럼에 적용하는 키워드가 아니다
SELECT empno, DISTINCT deptno FROM emp
ORDER BY deptno, empno;


-- 근무중인 사원들의 직무 형태
SELECT DISTINCT job FROM emp
ORDER BY job;

-- 부서별 직무 조회하기
SELECT DISTINCT deptno, job FROM emp
ORDER BY deptno, job;




-- 데이터 연결 연산자, ||
SELECT ename, job
FROM emp;

SELECT ename || job AS EMPLOYEE
FROM emp;

SELECT empno, ename || ' is ' || job AS employee
FROM emp;

SELECT ename || ' is hired at ' || hiredate AS hired
FROM emp;

-- 키워드 -> 대문자 (SELECT, FROM, ...)
-- 식별자 -> 소문자 (컬럼명, 테이블명)
  