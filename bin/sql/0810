 + 기본키 지정 방법

  - 방법 1 : 컬럼레벨로 제약조건 이름없이 지정하기

	CREATE TABLE tablename (
	  colname1 type1 PRIMARY KEY,
	  colname2 type2
	);


  - 방법 2 : 컬럼레벨로 제약조건의 이름을 명시하며 지정하기

	CREATE TABLE tablename (
	  colname1 type1 CONSTRAINT cons_name PRIMARY KEY,
	  colname2 type2
	);


  - 방법 3 : 테이블레벨로 제약조건 지정하기 (이름X)

	CREATE TABLE tablename (
	  colname1 type1,
	  colname2 type2,
	  PRIMARY KEY ( colname1 )
	);


  - 방법 4 : 테이블레벨로 제약조건 지정하기 (이름O)

	CREATE TABLE tablename (
	  colname1 type1,
	  colname2 type2,
	  CONSTRAINT cons_name PRIMARY KEY ( colname1 )
	);


 + 외래키 지정 방법

  - 방법1 : 테이블 레벨로 제약조건을 이름없이 지정하기

	CREATE TABLE tablename (
	  colname1 type1,
	  colname2 type2,
	  FOREIGN KEY ( colname1 )
	    REFERENCES r_tablename ( r_colname )
	);


  - 방법2 : 테이블 레벨로 제약조건의 이름을 설정하여 지정하기

	CREATE TABLE tablename (
	  colname1 type1,
	  colname2 type2,
	  CONSTRAINT cons_name
	    FOREIGN KEY ( colname1 )
	    REFERENCES r_tablename ( r_colname )
	);


 ** 외래키의 추가 옵션
  - 외래키 설정 코드의 마지막에 추가로 적용할 수 있다

  - ON DELETE CASCADE
	참조 대상인 PK의 데이터를 삭제하면 FK키의 행(row)도 같이 삭제된다

  - ON DELETE SET NULL
	참조 대상인 PK의 데이터를 삭제하면 FK키의 컬럼 값이 NULL로 바뀐다
	
	
 + 식별 관계
  - FK가 PK역할을 동시에 수행하는 경우

  - PK-FK가 중복값을 가지기 못하도록 추가적인 처리가 필요한 경우가 많다


	ex)	상품TB			주문TB

		> 상품번호PK		> 상품번호PK-FK
		> 상품이름		> 구매한사람PK


		10001			10001
		Apple			Alice

		10002			10001
		Banana			Bob

		10003
		Cherry

 + 비식별 관계
  - FK와 PK가 서로 직접적인 연관이 없는 경우

  - FK와는 별도로 컬럼을 추가하여 PK로 지정한다


	ex)	상품TB			주문TB

					> 주문번호PK
		> 상품번호PK		> 상품번호FK
		> 상품이름		> 구매한사람


					1 (주문번호PK)
		10001			10001 (상품번호FK)
		Apple			Alice

					2 (주문번호PK)
		10002			10001 (상품번호FK)
		Banana			Bob

		10003
		Cherry
		
 + ALTER TABLE - 테이블 변경
  - 테이블의 구조(스키마, Schema)를 변경하기 위한 SQL 구문

  - 테이블을 지정하고 어떤 변경사항을 적용할 것인지 추가 구문으로 작성한다

  - 추가 구문은 목적에 따라 키워드 달라진다

	ADD	- 추가 사항 적용
	MODIFY	- 변경 사항 적용
	DROP	- 제거(삭제) 사항 적용



 + ALTER TABLE tablename ADD ( 컬럼명 데이터타입 );
  - 새로운 컬럼을 추가한다
  - 추가된 컬럼은 마지막 컬럼으로 들어간다


 + ALTER TABLE tablename MODIFY ( 컬럼명 데이터타입 );
  - 기존 컬럼의 데이터터타입을 변경한다
  - 크기만 변경할 수도 있다
  - 데이터타입과 함께 크기도 아예 변경할 수 있다

	** 컬럼에 데이터가 존재하면 동작이 달라진다
	 - 데이터 존재하면 데이터타입을 변경할 수 없다
	 - 데이터가 존재해도 크기는 가장 큰 값보다 크게 변경할 수는 있다

	** CHAR와 VARCHAR2는 데이터가 존재해도 서로 변경할 수 있다


 + ALTER TABLE tablename DROP COLUMN 컬럼명;
  - 컬럼을 삭제한다
  - 컬럼의 데이터도 전부 삭제된다



 + ALTER TABLE tablename SET UNUSED ( 컬럼명 );
  - 컬럼을 비활성화한다
  - 컬럼과 그 데이터들을 물리적으로 삭제하지는 않지만 컬럼을 사용할 수 없게
   만든다

  ** 테이블의 컬럼을 삭제하면 해당 테이블에 락(LOCK)이 걸린다
	(LOCK : 다른 사용자의 접근을 막고 작업하는 것)

  ** 테이블락 때문에 전체적인 시스템에 영향을 주거나 성능저하가 발생한다

  ** 서비스 중인 DB에 DROP을 함부로 수행하지 말아야한다


 + ALTER TABLE tablename DROP UNUSED COLUMNS;
  - 비활성화해둔 컬럼을 물리적으로 삭제한다



 + ALTER TABLE tablename RENAME TO new_tablename;
  - 테이블의 이름을 변경한다


 + ALTER TABLE tablename RENAME COLUMN old_columnname TO new_columnname;
  - 컬럼의 이름을 변경한다


 + ALTER TABLE - 테이블의 제약조건 다루기

  - ALTER TABLE tablename MODIFY 컬럼명 [데이터타입] 제약조건
	컬럼의 정보를 변경하며 제약사항을 반영한다
	NOT NULL, DEFAULT 제약사항을 부여할 때 사용한다


  - ALTER TABLE tablename ADD CONSTRAINT cons_name 제약조건설정
	테이블에 제약조건을 추가한다

  - ALTER TABLE tablename DROP CONSTRAINT cons_name
	테이블에 제약조건을 제거한다

